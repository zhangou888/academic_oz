library(x, character.only = TRUE)
}
})
Y_mcd <- robustbase::covMcd(Y)
# Robust estimate of location
Y_mcd$center
# Robust estimate of scatter
Y_mcd$cov
Y_mcd <- robustbase::covMcd(Y)
ellipse_mcd <- data.frame(ellipse(center = Y_mcd$center,
shape = Y_mcd$cov,
radius= Y_radius,
segments=100,draw=FALSE))
ellipse_mcd <- data.frame(robustbase::ellipse(center = Y_mcd$center,
shape = Y_mcd$cov,
radius= Y_radius,
segments=100,draw=FALSE))
ellipse_mcd <- data.frame(car::ellipse(center = Y_mcd$center,
shape = Y_mcd$cov,
radius= Y_radius,
segments=100,draw=FALSE))
## Step 2: load required packages
packages <- c("tidyverse","ggplot2", "outliers", "knitr",
"car","performance","mvoutlier","robustbase",
"assertr","DiPs","rrcov")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
Y_mcd <- robustbase::covMcd(Y)
ellipse_mcd <- data.frame(car::ellipse(center = Y_mcd$center,
shape = Y_mcd$cov,
radius= Y_radius,
segments=100,draw=FALSE))
Y_mcd <- robustbase::covMcd(Y)
# Robust estimate of location
Y_mcd$center
# Robust estimate of scatter
Y_mcd$cov
Y_mcd <- robustbase::covMcd(Y)
Y_mcd
ellipse_mcd <- data.frame(car::ellipse(center = Y_mcd$center,
shape = Y_mcd$cov,
radius= Y_radius,
segments=100,draw=FALSE))
colnames(ellipse_mcd) <- colnames(Y)
plot_fig <- plot_fig +
geom_polygon(data=ellipse_mcd, color="red", fill="red",
alpha=0.3) +
geom_point(aes(x = Y_mcd$center[1], y = Y_mcd$center[2]),
color = "red", size = 6)
plot_fig
#############################################################################
#                                                                          ##
##          Project: Outliers detection 8 in R                             ##
##          Outlier Detection (Part 2): Multivariate                       ##
##          Mahalanobis distance | Robust estimates (MCD): Example in R    ##
##-------------------------------------------------------------------------##
##          Programmer:  Mishtert T                                        ##
##          Request Date: 12-10-2019                                       ##
##          Initial Code:                                                  ##
##          Goals:                                                         ##
##          Input:                                                         ##
##          Output:                                                        ##
##          Note: This is the example code to handle multivariate outliers ##
##  https://medium.com/towards-artificial-intelligence/outlier-detection-part-2-multivariate-df486f658d09 ##
##         The R content presented in this document is mostly based on an  ##
##-------------------------------------------------------------------------##
##          Modification History:                                          ##
##          When: 11-16-2020                                               ##
##          Who:   Ou Zhang                                                ##
##          Change:                                                        ##
##-------------------------------------------------------------------------##
# --- References --- #
## Step 1: Set work directory
rm(list=ls())
## Step 2: load required packages
packages <- c("tidyverse","ggplot2","outliers",
"robustbase","MASS","mvoutlier","car")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
# Load library.
library(MASS)
library(tidyverse)
library(robustbase)
library(car)
## Step 3: Set up key libraries and source code
proj.path = file.path("c:/temp/stat ");
data.path = file.path(proj.path,"data/");
out.path = file.path(proj.path,"out/");
setwd(proj.path)
## ------------ Step 4: Data source ----------- #
# "Animals "data from the "MASS" package in R for demonstration.
data(Animals)
attach(Animals)
# Check data structure.
str(Animals)
head(Animals)
# The variables for the demonstration are body weight and brain weight of
# Animals which are converted to its log form (to make highly skewed
# distributions less skewed)
Y <- data.frame(body = log(Animals$body),
brain = log(Animals$brain))
# plot scatterplot to check the distribution.
plot_fig <- ggplot(Y, aes(x = body, y = brain)) +
geom_point(size = 5) +
xlab("log(body)") + ylab("log(brain)") +
ylim(-5, 15) +
scale_x_continuous(limits = c(-10, 16),
breaks = seq(-15, 15, 5))
# Display scatterplot.
plot_fig
##  -------- Step 5: Mahalanobis distance  -----------  ##
# Mahalanobis (or generalized) distance for observation is the distance from
# this observation to the center, taking into account the covariance matrix.
# 1. Classical Mahalanobis distances: sample mean as estimate for location and
#     sample covariance matrix as estimate for scatter.
#
# 2. To detect multivariate outliers the Mahalanobis distance is compared with
#    a cut-off value, which is derived from the chi-square distribution
#
# 3. In two dimensions we can construct corresponding 97.5% tolerance ellipsoid,
#    which is defined by those observations whose Mahalanobis distance does not
#    exceed the cut-off value.
Y <- data.frame(body = log(Animals$body),
brain = log(Animals$brain))
Y_center <- colMeans(Y) # sample mean
Y_cov <- cov(Y)         # sample cov
Y_radius <- sqrt(qchisq(0.975, df = ncol(Y))) # Circle radius
Y_ellipse <- data.frame(car::ellipse(center = Y_center,
shape = Y_cov,
radius = Y_radius,
segments = 100,
draw = FALSE))
Y_mcd <- covMcd(Y)
# Robust estimate of location
Y_mcd$center
# Robust estimate of scatter
Y_mcd$cov
# --- 6.1 Robust Tolerance Ellipsoid: Animals --- #
Y_mcd <- covMcd(Y)
ellipse_mcd <- data.frame(ellipse(center = Y_mcd$center,
shape = Y_mcd$cov,
radius= Y_radius,
segments=100,draw=FALSE))
colnames(ellipse_mcd) <- colnames(Y)
plot_fig <- plot_fig +
geom_polygon(data=ellipse_mcd, color="red", fill="red",
alpha=0.3) +
geom_point(aes(x = Y_mcd$center[1], y = Y_mcd$center[2]),
color = "red", size = 6)
plot_fig
Y_mcd <- covMcd(Y)
# Robust estimate of location
Y_mcd$center
# Robust estimate of scatter
Y_mcd$cov
# --- 6.1 Robust Tolerance Ellipsoid: Animals --- #
Y_mcd <- covMcd(Y)
ellipse_mcd <- data.frame(car::ellipse(center = Y_mcd$center,
shape = Y_mcd$cov,
radius= Y_radius,
segments=100,draw=FALSE))
# --- 6.1 Robust Tolerance Ellipsoid: Animals --- #
Y_mcd <- covMcd(Y)
ellipse_mcd <- data.frame(car::ellipse(center = Y_mcd$center,
shape = Y_mcd$cov,
radius= Y_radius,
segments=100,draw=FALSE))
Y_mcd <- robustbase::covMcd(Y)
ellipse_mcd <- data.frame(car::ellipse(center = Y_mcd$center,
shape = Y_mcd$cov,
radius= Y_radius,
segments=100,draw=FALSE))
colnames(ellipse_mcd) <- colnames(Y)
plot_fig <- plot_fig +
geom_polygon(data=ellipse_mcd, color="red", fill="red",
alpha=0.3) +
geom_point(aes(x = Y_mcd$center[1], y = Y_mcd$center[2]),
color = "red", size = 6)
plot_fig
## Step 2: load required packages
packages <- c("tidyverse","ggplot2", "outliers", "knitr",
"car","performance","mvoutlier","robustbase",
"assertr","DiPs","rrcov","REPPlab")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
install.packages("REPPlab")
## Step 2: load required packages
packages <- c("tidyverse","ggplot2", "outliers", "knitr",
"car","performance","mvoutlier","robustbase",
"assertr","DiPs","rrcov","REPPlab")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
knitr::opts_chunk$set(eval = TRUE,
echo = TRUE,
cache = FALSE,
warning = FALSE,
include = TRUE,
message=FALSE,
collapse = FALSE,
dependson = NULL,
engine = "R", # Chunks will always have R code, unless noted
error = TRUE,
# root.dir = "C:/Users/uzhanou/Documents/R/markdown/Serena/",
fig.path = "figure/",  # Set the figure options
fig.align = "center",
fig.width = 6,
fig.height = 6)
## Step 2: load required packages
packages <- c("tidyverse","ggplot2", "outliers", "knitr",
"car","performance","mvoutlier","robustbase",
"assertr","DiPs","rrcov","REPPlab")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
library(ICSOutlier)
library(ICSOutlier)
## Step 2: load required packages
packages <- c("tidyverse","ggplot2", "outliers", "knitr",
"car","performance","mvoutlier","robustbase",
"assertr","DiPs","rrcov","REPPlab","ICSOutlier")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
library(ICSOutlier)
install.packages("ICSOutlier")
library(ICSOutlier)
# ReliabilityData example: the observations 414 and 512 are suspected to be outliers
library(REPPlab)
install.packages("REPPlab")
# ReliabilityData example: the observations 414 and 512 are suspected to be outliers
library(REPPlab)
## Step 2: load required packages
packages <- c("tidyverse","ggplot2", "outliers", "knitr","devtools",
"car","performance","mvoutlier","robustbase",
"assertr","DiPs","rrcov","REPPlab","ICSOutlier")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
install_github("fischuu/REPPlab")
library(REPPlab)
library(ICSOutlier)
# Exemple of no direction and hence also no outlier
set.seed(123)
X = rmvnorm(500, rep(0, 2), diag(rep(0.1,2)))
icsX <- ics2(X)
icsOutlierJB <- ics.outlier(icsX, test = "jarque", level.dist = 0.01,
level.test = 0.01, mDist = 100, ncores = 1)
summary(icsOutlierJB)
plot(icsOutlierJB)
rm(.Random.seed)
set.seed(123)
X = matrix(rweibull(1000, 4, 4), 500, 2)
X = apply(X,2, function(x){ifelse(x<5 & x>2, x, runif(sum(!(x<5 & x>2)), 5, 5.5))})
icsX <- ics2(X)
icsOutlierAG <- ics.outlier(icsX, test = "anscombe", level.dist = 0.01,
level.test = 0.05, mDist = 100, ncores = 1)
summary(icsOutlierAG)
plot(icsOutlierAG)
rm(.Random.seed)
## Step 2: load required packages
packages <- c("tidyverse","ggplot2", "outliers", "knitr","devtools",
"car","performance","mvoutlier","robustbase",
"assertr","DiPs","rrcov","ICSOutlier","dbscan")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
xaringan:::inf_mr()
blogdown:::serve_site()
xaringan:::inf_mr()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
#############################################################################
#                                                                          ##
##          Project: Outliers detection 8 in R                             ##
##          Outlier Detection (Part 2): Multivariate                       ##
##          Mahalanobis distance | Robust estimates (MCD): Example in R    ##
##-------------------------------------------------------------------------##
##          Programmer:  Mishtert T                                        ##
##          Request Date: 12-10-2019                                       ##
##          Initial Code:                                                  ##
##          Goals:                                                         ##
##          Input:                                                         ##
##          Output:                                                        ##
##          Note: This is the example code to handle multivariate outliers ##
##  https://medium.com/towards-artificial-intelligence/outlier-detection-part-2-multivariate-df486f658d09 ##
##         The R content presented in this document is mostly based on an  ##
##-------------------------------------------------------------------------##
##          Modification History:                                          ##
##          When: 11-16-2020                                               ##
##          Who:   Ou Zhang                                                ##
##          Change:                                                        ##
##-------------------------------------------------------------------------##
# --- References --- #
## Step 1: Set work directory
rm(list=ls())
## Step 2: load required packages
packages <- c("tidyverse","ggplot2","outliers",
"robustbase","MASS","mvoutlier","car")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
# Load library.
library(MASS)
library(tidyverse)
library(robustbase)
library(car)
## Step 3: Set up key libraries and source code
proj.path = file.path("c:/temp/stat ");
data.path = file.path(proj.path,"data/");
out.path = file.path(proj.path,"out/");
setwd(proj.path)
## ------------ Step 4: Data source ----------- #
# "Animals "data from the "MASS" package in R for demonstration.
data(Animals)
attach(Animals)
# Check data structure.
str(Animals)
head(Animals)
# The variables for the demonstration are body weight and brain weight of
# Animals which are converted to its log form (to make highly skewed
# distributions less skewed)
Y <- data.frame(body = log(Animals$body),
brain = log(Animals$brain))
# plot scatterplot to check the distribution.
plot_fig <- ggplot(Y, aes(x = body, y = brain)) +
geom_point(size = 5) +
xlab("log(body)") + ylab("log(brain)") +
ylim(-5, 15) +
scale_x_continuous(limits = c(-10, 16),
breaks = seq(-15, 15, 5))
# Display scatterplot.
plot_fig
##  -------- Step 5: Mahalanobis distance  -----------  ##
# Mahalanobis (or generalized) distance for observation is the distance from
# this observation to the center, taking into account the covariance matrix.
# 1. Classical Mahalanobis distances: sample mean as estimate for location and
#     sample covariance matrix as estimate for scatter.
#
# 2. To detect multivariate outliers the Mahalanobis distance is compared with
#    a cut-off value, which is derived from the chi-square distribution
#
# 3. In two dimensions we can construct corresponding 97.5% tolerance ellipsoid,
#    which is defined by those observations whose Mahalanobis distance does not
#    exceed the cut-off value.
Y <- data.frame(body = log(Animals$body),
brain = log(Animals$brain))
Y_center <- colMeans(Y) # sample mean
Y_cov <- cov(Y)         # sample cov
Y_radius <- sqrt(qchisq(0.975, df = ncol(Y))) # Circle radius
Y_ellipse <- data.frame(car::ellipse(center = Y_center,
shape = Y_cov,
radius = Y_radius,
segments = 100,
draw = FALSE))
# give the same colnames.
colnames(Y_ellipse) <- colnames(Y)
# plot scatterplot with Mahalanobis distance ellipse.
plot_fig <- plot_fig + geom_polygon(data=Y_ellipse,
color = "dodgerblue",
fill = "dodgerblue", alpha = 0.2) +
geom_point(aes(x = Y_center[1], y = Y_center[2]),
color = "blue", size = 6)
plot_fig
##  -------- Step 6: Robust estimates of location and scatter  ------  ##
# Minimum Covariance Determinant (MCD) estimator of Rousseeuw is a popular
# robust estimator of multivariate location and scatter.
Y_mcd <- covMcd(Y)
# Robust estimate of location
Y_mcd$center
# Robust estimate of scatter
Y_mcd$cov
# --- 6.1 Robust Tolerance Ellipsoid: Animals --- #
Y_mcd <- covMcd(Y)
ellipse_mcd <- data.frame(car::ellipse(center = Y_mcd$center,
shape = Y_mcd$cov,
radius= Y_radius,
segments=100,draw=FALSE))
colnames(ellipse_mcd) <- colnames(Y)
plot_fig <- plot_fig +
geom_polygon(data=ellipse_mcd, color="red", fill="red",
alpha=0.3) +
geom_point(aes(x = Y_mcd$center[1], y = Y_mcd$center[2]),
color = "red", size = 6)
plot_fig
# ---- 6.2 Distance-Distance plot --- #
# The distance-distance plot shows the robust distance of each observation versus
# its classical Mahalanobis distance, obtained immediately from MCD object.
robustbase::plot(Y_mcd, which = "dd")
robustbase::plot(Y_mcd, which = "dd")
xaringan:::inf_mr()
xaringan:::inf_mr()
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
blogdown:::serve_site()
xaringan:::inf_mr()
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
blogdown:::serve_site()
xaringan:::inf_mr()
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
blogdown:::serve_site()
xaringan:::inf_mr()
blogdown:::serve_site()
xaringan:::inf_mr()
xaringan:::inf_mr()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
# Multivariate
# select only mpg and disp (continuous)
mt1 <- mtcars[, c(1, 3, 4)]
# create some fake outliers and attach outliers to main df
mt2 <- rbind(mt1, data.frame(mpg = c(37, 40), disp = c(300, 400), hp = c(110, 120)))
# fit model with outliers
model <- lm(disp ~ mpg + hp, data = mt2)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
# Create first example data frame (data1)
data1 <- data.frame(ID = 1:2,
X1 = c("a1", "a2"),
stringsAsFactors = FALSE)
# Create second example data frame (data2)
data2 <- data.frame(ID = 2:3,
X2 = c("b1", "b2"),
stringsAsFactors = FALSE)
data1
data2
xaringan:::inf_mr()
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
library(blogdonw)
library(blogdown)
install.packages("blogdown")
library(blogdown)
blogdown:::serve_site()
blogdown::install_hugo()
library(blogdown)
blogdown:::serve_site()
blogdown::install_hugo()
blogdown::hugo_version()
blogdown:::serve_site()
blogdown::install_theme("wowchemy/starter-academic")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::new_site(theme = "gcushen/hugo-academic")
hugo_version()
library(blogdown)
blogdown::hugo_version()
blogdown::install_hugo('0.66', force = T, use_brew = F)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::install_hugo('0.66', force = T, use_brew = F)
system('brew remove hugo')
library(blogdown)
blogdown::install_hugo('0.30', force = T, use_brew = F)
blogdown::install_hugo('0.66', force = T, use_brew = F)
system('brew remove hugo')
blogdown::install_hugo('0.66', force = T, use_brew = F)
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown::new_site(theme = 'amlankar/hugo-academic')
blogdown::install_theme(amlankar/hugo-academic)
install.packages("rstudioapi")
# install.packages("devtools")
devtools::install_github("rstudio/rstudioapi")
library(devtools)
