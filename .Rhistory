set.seed(17)
# Set the covariance matrix
sigma2 <- matrix(c(5, 2, 2, 5), ncol=2)
# Set the means
mu <- c(5,5)
# Get the correlation matrix
# scales a covariance matrix
P <- cov2cor(sigma2)
P
library(mvtnorm) # References rmvnorm()
library(ellipse) # References ellipse()
set.seed(17)
# Set the covariance matrix
sigma2 <- matrix(c(5, 2, 2, 5), ncol=2)
# Set the means
mu <- c(5,5)
# Get the correlation matrix
# scales a covariance matrix into the corresponding correlation matrix.
P <- cov2cor(sigma2)
# Generate the data
p <- rmvnorm(n=50, mean=mu, sigma=sqrt(sigma2))
# Plot the data
plot(p)
evals <- eigen(P)$values
evecs <- eigen(P)$vectors
# Angles of a circle
a <- seq(0, 2*pi, len=100)
# Get critical value
c2 <- qchisq(0.95, 2)
c <- sqrt(c2)
xT <- c * sqrt(evals[1]) * cos(a)
yT <- c * sqrt(evals[2]) * sin(a)
M <- cbind(xT, yT)
# Covert the coordinates
transM <- evecs %*% t(M)
transM <- t(transM)
lines(transM + mu)
data(mtcars)
fit <- lm(mpg ~ disp + cyl , mtcars)
# which indicate IVs.
plot(ellipse(fit, which = c('disp', 'cyl'),
level = 0.95), type = 'l')
points(fit$coefficients['disp'], fit$coefficients['cyl'])
# 95% CI Ellpise
dataEllipse(z,levels=.95)
mu = c(0,0)
sigma = matrix(c(20,0,0,45),nrow=2)
z = rmvnorm(10000,mu,sigma)
# 95% CI Ellpise
dataEllipse(z,levels=.95)
center <- apply(z, 2, mean)
cov_mat <- cov(z)
ellipse(center, cov_mat, col="red", radius=sqrt(2 * qf(.95, 2, 9999)))
p
data.ellipse(Prestige$income, Prestige$education, levels=0.1*1:9, lty=2)
car::data.ellipse(Prestige$income, Prestige$education, levels=0.1*1:9, lty=2)
car::dataEllipse(Prestige$income, Prestige$education, levels=0.1*1:9, lty=2)
confidence.ellipse(lm(prestige~income+education, data=Prestige), Scheffe=TRUE)
confidenceEllipse(lm(prestige~income+education, data=Prestige), Scheffe=TRUE)
car::dataEllipse(Prestige$income, Prestige$education, levels=0.95, lty=2)
plot(gini, secpay, main = "Nondemocratic countries",
xlab="Gini", ylab="Attitudes towards inequality(mean)")
weakliem.model1 <- lm(secpay~gini+gdp, data=weakliem2)
# adding regression line
abline(weakliem.model1, lwd=2, lty=1, col=1)
# library(car)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(gini, secpay, levels=0.95, lty=2)
# adding regression line
abline(weakliem.model1, lwd=2, lty=1, col=1)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(gini, secpay, levels=0.95, lty=1, col="red")
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(gini, secpay, levels=0.95, lty=1)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(gini, secpay, levels=0.95, lty=1,
main = "Nondemocratic countries",
xlab="Gini", ylab="Attitudes towards inequality(mean)")
# adding regression line
abline(weakliem.model1, lwd=2, lty=1, col=1)
# "identify" remove 'slovakia'(49) and 'CzechRepublic'(25) as outliers.
# Model 2
weakliem.model2 <- update(weakliem.model1, subset=-c(25,49))
abline(weakliem.model2, lwd=2, lty=2, col=2)
confidenceEllipse(lm(prestige~income+education, data=Prestige), Scheffe=TRUE)
plot(height, weight, main = "Davis data")
packages <- c("tidyverse","mlbench","mice","Hmisc","DMwR",
"rpart","mice","outliers")
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
library(mlbench)
library(mice)
## Step 3: Set up key libraries and source code
proj.path = file.path("c:/temp/stat ");
data.path = file.path(proj.path,"data/");
out.path = file.path(proj.path,"out/");
setwd(proj.path)
# original data
cars1 <- cars[1:30, ]
# introduce outliers.
cars_outliers <- data.frame(speed=c(19,19,20,20,20),
dist=c(190, 186, 210, 220, 218))
cars2 <- rbind(cars1, cars_outliers)  # data with outliers.
# Plot of data with outliers.
par(mfrow=c(1, 2))
plot(cars2$speed, cars2$dist,
xlim=c(0, 28), ylim=c(0, 230),
main="With Outliers",
xlab="speed", ylab="dist",
pch="*", col="red", cex=2)
# regression reference line
abline(lm(dist ~ speed, data=cars2), col="blue", lwd=3, lty=2)
# Plot of original data without outliers.
# Note the change in slope (angle) of best fit line.
plot(cars1$speed, cars1$dist,
xlim=c(0, 28), ylim=c(0, 230),
main="Outliers removed \n A much better fit!",
xlab="speed", ylab="dist",
pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars1), col="blue", lwd=3, lty=2)
# original data
cars1 <- cars[1:30, ]
# introduce outliers.
cars_outliers <- data.frame(speed=c(19,19,20,20,20),
dist=c(190, 186, 210, 220, 218))
cars2 <- rbind(cars1, cars_outliers)  # data with outliers.
# Plot of data with outliers.
par(mfrow=c(1, 2))
plot(cars2$speed, cars2$dist,
xlim=c(0, 28), ylim=c(0, 230),
main="With Outliers",
xlab="speed", ylab="dist",
pch="*", col="red", cex=2)
# regression reference line
abline(lm(dist ~ speed, data=cars2), col="blue", lwd=3, lty=2)
# Plot of original data without outliers.
# Note the change in slope (angle) of best fit line.
plot(cars1$speed, cars1$dist,
xlim=c(0, 28), ylim=c(0, 230),
main="Outliers removed \n A much better fit!",
xlab="speed", ylab="dist",
pch="*", col="red", cex=2)
plot(cars2$speed, cars2$dist,
xlim=c(0, 28), ylim=c(0, 230),
main="With Outliers",
xlab="speed", ylab="dist",
pch="*", col="red", cex=2)
par(mfrow=c(1, 2))
plot(cars2$speed, cars2$dist,
xlim=c(0, 28), ylim=c(0, 230),
main="With Outliers",
xlab="speed", ylab="dist",
pch="*", col="red", cex=2)
# regression reference line
abline(lm(dist ~ speed, data=cars2), col="blue", lwd=3, lty=2)
# Plot of original data without outliers.
# Note the change in slope (angle) of best fit line.
plot(cars1$speed, cars1$dist,
xlim=c(0, 28), ylim=c(0, 230),
main="Outliers removed \n A much better fit!",
xlab="speed", ylab="dist",
pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars1), col="blue", lwd=3, lty=2)
Gene_id <- c("GeneA", "GeneB", "GeneC", "GeneD", "GeneE", "GeneF")
expA    <- c(5.462109, 2.667692, 4.796976, 3.127125, 4.500583, 4.598430)
expB    <- c(5.006181, 4.208152, 4.122660, 3.676322, 4.104575, 4.853717)
# Calculate log base two for results from each experiment
log2_A <- log2(expA)
log2_B <- log2(expB)
# Plot data
plot(log2_A~log2_B)
# Calculate and display the regression line
regression <- lm(log2_A~log2_B)
abline(regression)
# Show regression formula
print(regression)
# Create data frame for sample data
data <- data.frame(Gene_id, expA, expB)
# Calculate residuals
data$residuals <- residuals(regression)
# Choose a threshhold
outlier_threshold <- 0.3
# Print only names of outliers
outliers <- data[ abs(data$residuals) > outlier_threshold, ]
print(outliers$Gene_id)
library(car)
data(Davis)
attach(Davis)
davis.model.1 <- lm(repwt~weight, data=Davis)
model1 <- lm(weight ~ height, data=Davis)
plot(height, weight, main = "Davis data")
# Datasetis in the following library
library(car)
proj.path = file.path("c:/temp/stat ");
data.path = file.path(proj.path,"data/");
out.path = file.path(proj.path,"out/");
setwd(proj.path)
# If not installed type install.packages("car")
#Type help(Prestige) to access the codebook
help(Prestige)
data(Prestige)
## --- Linear Regression --- ##
# R automatically process the log base 2 of income in the equation.
# log2 computes binary (i.e., base 2) logarithms
reg1 <- lm(prestige ~ education + log2(income) + women,
data = Prestige)
summary(reg1)
library(mvtnorm) # References rmvnorm()
library(ellipse) # References ellipse()
set.seed(17)
# Set the covariance matrix
sigma2 <- matrix(c(5, 2, 2, 5), ncol=2)
# Set the means
mu <- c(5,5)
# Get the correlation matrix
# scales a covariance matrix into the corresponding correlation matrix.
P <- cov2cor(sigma2)
# Generate the data
p <- rmvnorm(n=50, mean=mu, sigma=sqrt(sigma2))
# Plot the data
plot(p)
# Plot the ellipse
# lines(ellipse(P, centre = c(5,5)) -> center is the mean , col='red')
ellipse(P, centre = c(5,5)) %>%
lines(., col='red')
# obtain Eigenvalue and eigenvector
evals <- eigen(P)$values
evecs <- eigen(P)$vectors
a <- seq(0, 2*pi, len=100)
# Get critical value
c2 <- qchisq(0.95, 2)
c <- sqrt(c2)
# Get the distances
xT <- c * sqrt(evals[1]) * cos(a)
yT <- c * sqrt(evals[2]) * sin(a)
M <- cbind(xT, yT)
# Covert the coordinates
transM <- evecs %*% t(M)
transM <- t(transM)
lines(transM + mu)
P
p
data(mtcars)
fit <- lm(mpg ~ disp + cyl , mtcars)
# which indicate IVs.
plot(ellipse(fit, which = c('disp', 'cyl'),
level = 0.95), type = 'l')
points(fit$coefficients['disp'], fit$coefficients['cyl'])
summary(fit)
fit <- lm(mpg ~ cyl, data=mtcars)
data(mtcars)
fit <- lm(mpg ~ cyl, data=mtcars)
summary(fit)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(cyl, mpg, levels=0.95, lty=1,
main = "MPG vs. Cyl",
xlab="cyl", ylab="mpg")
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ disp + cyl, data=mtcars)
summary(fit)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(cyl, mpg, levels=0.95, lty=1,
main = "mpg vs. cyl",
xlab="cly", ylab="mpg")
# adding regression line
abline(fit, lwd=2, lty=1, col=1)
data(mtcars)
fit <- lm(mpg ~ disp + cyl, data=mtcars)
# which indicate IVs.
plot(ellipse(fit, which = c('disp', 'cyl'),
level = 0.95), type = 'l')
points(fit$coefficients['disp'], fit$coefficients['cyl'])
url <- "https://raw.githubusercontent.com/dnbarron/Advanced-Quant/master/Lecture%202/Weakliem.txt"
weakliem2 <- read.table(url,
header=TRUE)
attach(weakliem2)
# check the data structure.
str(weakliem2)
head(weakliem2)
weakliem2 <- weakliem2 %>%
mutate(id = row_number())
plot(gini, secpay, main = "Nondemocratic countries",
xlab="Gini", ylab="Attitudes towards inequality(mean)")
# Model 1
weakliem.model1 <- lm(secpay~gini+gdp, data=weakliem2)
# draw 95% CI ellipse
# from library(car)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(gini, secpay, levels=0.95, lty=1,
main = "Nondemocratic countries",
xlab="Gini", ylab="Attitudes towards inequality(mean)")
# adding regression line
abline(weakliem.model1, lwd=2, lty=1, col=1)
View(weakliem2)
url <- "https://raw.githubusercontent.com/dnbarron/Advanced-Quant/master/Lecture%202/Weakliem.txt"
weakliem2 <- read.table(url, header=TRUE)
attach(weakliem2)
# check the data structure.
# str(weakliem2)
# head(weakliem2)
# weakliem2 <- weakliem2 %>%
#   mutate(id = row_number())
plot(gini, secpay, main = "Nondemocratic countries",
xlab="Gini", ylab="Attitudes towards inequality(mean)")
# Model 1
weakliem.model1 <- lm(secpay~gini+gdp, data=weakliem2)
car::dataEllipse(gini, secpay, levels=0.95, lty=1,
main = "Nondemocratic countries",
xlab="Gini", ylab="Attitudes towards inequality(mean)")
# adding regression line
abline(weakliem.model1, lwd=2, lty=1, col=1)
library(car)
data(Davis)
attach(Davis)
davis.model.1 <- lm(repwt~weight, data=Davis)
model1 <- lm(weight ~ height, data=Davis)
plot(height, weight, main = "Davis data")
plot(weight, repwt, main = "Davis data2")
library(car)
data(Davis)
attach(Davis)
davis.model.1 <- lm(repwt~weight, data=Davis)
# draw 95% CI ellipse
# from library(car)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(weight, repwt, levels=0.95, lty=1,
main = "Nondemocratic countries",
xlab="weight", ylab="repwt")
weight
repwt
davis.model.1 <- lm(weight~height, data=Davis)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1,
main = "Nondemocratic countries",
xlab="weight", ylab="repwt")
# adding regression line
abline(davis.model.1, lwd=2, lty=1, col=1)
davis.model.1 <- lm(repwt~weight, data=Davis)
model1 <- lm(weight ~ height, data=Davis)
plot(height, weight, main = "Davis data")
library(car)
data(Davis)
attach(Davis)
model1 <- lm(weight ~ height, data=Davis)
# draw 95% CI ellipse
# from library(car)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# adding regression line
abline(model1, lwd=2, lty=1, col=1)
library(car)
data(Davis)
attach(Davis)
model1 <- lm(weight ~ height, data=Davis)
# draw 95% CI ellipse
# from library(car)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# adding regression line
abline(model1, lwd=2, lty=1, col=1)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=2,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# adding regression line
abline(model1, lwd=2, lty=1, col=2)
# adding regression line
abline(model1, lwd=2, lty=1, col=3)
# adding regression line
abline(model1, lwd=2, lty=1, col=4)
# adding regression line
abline(model1, lwd=2, lty=1, col=5)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=1,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
palette()
carPalette()
car::dataEllipse(height, weight, levels=0.95, lty=1, col=2,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# adding regression line
abline(model1, lwd=2, lty=1, col=2)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=3,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# adding regression line
abline(model1, lwd=2, lty=1, col=2)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=4,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=5,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=56
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=6,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=7,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=8,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=9,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=10,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
library(car)
data(Davis)
attach(Davis)
model1 <- lm(weight ~ height, data=Davis)
# draw 95% CI ellipse
# from library(car)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=1,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# adding regression line
abline(model1, lwd=2, lty=1, col=2)
model1 <- lm(weight ~ height)
# draw 95% CI ellipse
# from library(car)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=1,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# adding regression line
abline(model1, lwd=2, lty=1, col=2)
# adding regression line
abline(model1, lwd=2, lty=1, col=2)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=1,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# adding regression line
abline(model1, lwd=2, lty=1, col=2)
library(car)
data(Davis)
attach(Davis)
model1 <- lm(weight ~ height)
# draw 95% CI ellipse
# from library(car)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=1,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# adding regression line
abline(model1, lwd=2, lty=1, col=2)
data(Davis)
attach(Davis)
model1 <- lm(weight ~ height)
# draw 95% CI ellipse
# from library(car)
# confidenceEllipse(weakliem.model1, levels=0.95,Scheffe=TRUE)
car::dataEllipse(height, weight, levels=0.95, lty=1, col=1,
main = "Height vs. Weight",
xlab="Height", ylab="Weight")
# adding regression line
abline(model1, lwd=2, lty=1, col=2)
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
xaringan:::inf_mr()
blogdown:::serve_site()
xaringan:::inf_mr()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
xaringan:::inf_mr()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
xaringan:::inf_mr()
blogdown:::serve_site()
blogdown serve site
blogdown::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
xaringan:::inf_mr()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
xaringan:::inf_mr()
